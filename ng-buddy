#!/bin/sh

# PROVIDE:	ngb
# REQUIRE:	FILESYSTEMS
# BEFORE:	NETWORKING

# See ng-buddy(8) for confiugration details. For manual configuration,
# add the following to /etc/rc.conf[.local]:
#
# ngb_enable="YES"
# ngb_BRIDGE_if="IF"
#	Link a new BRIDGE to interface IF.
#	If IF does not exist, create an ng_eiface device.
# ngb_BRIDGE_list="IF1 IF2 ..."
#	Create additional ng_eiface devices attached to BRIDGE.

. /etc/rc.subr

name="ngb"
desc="configures netgraph bridge and eiface devices"
rcvar="ngb_enable"

enable_cmd="${name}_enable"
start_cmd="${name}_start"
stop_cmd="${name}_stop"
status_cmd="${name}_status"
bridge_cmd="${name}_bridge"
create_cmd="${name}_create"
destroy_cmd="${name}_destroy"
vmconf_cmd="${name}_vmconf"
vmname_cmd="${name}_vmname"
jail_cmd="${name}_jail"
unbridge_cmd="${name}_shutdown_bridge"
unjail_cmd="${name}_unjail"
extra_commands="bridge create destroy jail unbridge unjail vmconf vmname"

load_rc_config "$ngb"
# TO-DO: Find a more elegant way to get the dynamic "bridge_name" list.
: ${ngb_bridge_list:="`list_vars 'ngb_*_if'|sed -E 's/^ngb_|_if$//g'|xargs`"}
: ${ngb_share_dir:="/usr/local/share/ng-buddy"}

# Count netgraph links
linkpp() {
	LNUM=$((LNUM+1))
}

# Make a "public" bridge to the NIC containing the default gateway, and create a
# "private" bridge linked to eiface nghost0.
ngb_enable() {
	sysrc ngb_enable=YES
	if [ -n "$ngb_bridge_list" ]
	then
		exit 0
	else
		echo Adding default bridges.
	fi
	: ${ngb_public_if:="`netstat -rn|grep default|cut -wf4|tr . _`"}
	: ${ngb_private_if:="nghost0"}
	sysrc ngb_public_if="$ngb_public_if"
	sysrc ngb_private_if="$ngb_private_if"
}

# Configure vm-bhyve with ngb bridges (version 1.5+ required)
ngb_vmname() {
	case "$vm_dir" in
		zfs:*)	vm_dir="`echo "$vm_dir"|cut -d: -f2`"
			vm_conf="`zfs get -H mountpoint "$vm_dir"|cut -wf3`" ;;
		?*)	vm_conf="$vm_dir" ;;
		*)	return ;;
	esac
	running_vms=`ps axww|awk '/bhyve[:] /{print $6}'`
	for this_vm in $running_vms; do
		vm_socket_name=`echo $this_vm|tr ". " _`
		vm_if_conf=`tail -r "$vm_conf/$this_vm/vm-bhyve.log" |\
			grep -Eom1 'netgraph,path=.*,peerhook=[^,]+'`
		path=`echo $vm_if_conf|cut -d, -f2|cut -d= -f2`
		peerhook=`echo $vm_if_conf|cut -d, -f3|cut -d= -f2`
		ngctl name $path$peerhook $vm_socket_name
	done
}

ngb_vmconf() {
	case "$vm_dir" in
		zfs:*)	vm_dir="`echo "$vm_dir"|cut -d: -f2`"
			vm_conf="`zfs get -H mountpoint "$vm_dir"|cut -wf3`" ;;
		?*)	vm_conf="$vm_dir" ;;
		*)	return ;;
	esac
	vm_bak="$vm_conf/.config/.system.conf.bak"
	vm_conf="$vm_conf/.config/system.conf"
	cp -p "$vm_conf" "$vm_bak"
	echo Configuring $vm_conf:
	sysrc -f "$vm_conf" switch_list+="$ngb_bridge_list"
	for ngb_bridge in $ngb_bridge_list
	do
		sysrc -f "$vm_conf" type_$ngb_bridge=netgraph
	done
}

# Make sure netgraph is loaded and count its links.
ngb_init() {
	[ -n "$LNUM" ] && linkpp
	kldload -nq ng_ether ng_bridge
	LNUM=`ngctl list -l|awk -F'.*link| ' '/link/{if($2>x||x=="")x=$2}END{print x}'`
	if [ -n "$LNUM" ]
	then
		linkpp
	else
		LNUM=0
	fi
}

# Enable a private bridge and attach a new eiface.
ngb_private() {
	bridge=$1
	eval linkif=\$ngb_${bridge}_if
	ngctl mkpeer eiface ether ether
	ngeth=`ngctl list|cut -wf3|grep '^ngeth'|sort -n|tail -1`
	ngctl name $ngeth: $linkif
	ifconfig $ngeth name $linkif up > /dev/null
	ngctl mkpeer $linkif: bridge ether link${LNUM}; linkpp
	ngctl name $linkif:ether $bridge
}

# Enable a public bridge and attach an existing NIC
ngb_public() {
	bridge=$1
	eval linkif=\$ngb_${bridge}_if
	ngctl msg $linkif: setpromisc 1
	ngctl msg $linkif: setautosrc 0
	ngctl mkpeer $linkif: bridge lower link${LNUM}; linkpp
	ngctl name  $linkif:lower $bridge
	ngctl connect $linkif: $bridge: upper link${LNUM}; linkpp
	ifconfig $linkif lro -tso4 -tso6 -vlanhwfilter -vlanhwtso
}

# Attach a new eiface to the specified bridge
ngb_addif() {
	bridge=$1
	ifname=$2
	ifconfig $ifname > /dev/null 2>&1 && return
	ngctl mkpeer $bridge: eiface link${LNUM} ether
	ngif=`ngctl show -n $bridge:link${LNUM} |awk '{print $2}'`; linkpp
	ngctl name $ngif: $ifname
	ifconfig $ngif name $ifname >/dev/null
}

# Attach new eifaces to the specified bridge
ngb_addiflist() {
}

# service ngb create: add the eiface to the specified (or default) bridge
ngb_eiface() {
	ngb_init
	ifname="$1"
	bridge="$2"
	if [ -z "$2" ] ; then
		# TO-DO: Prefer bridge associated with the default route.
		bridge="`echo $ngb_bridge_list|awk '{print $1}'`"
	fi
	[ $LNUM = 0 ] && linkpp
	ngb_addif "$bridge" "$ifname"
}

ngb_create() {
	ngb_eiface "$@"
	sysrc ngb_${bridge}_list+="$ifname"
}

ngb_jail() {
	ngb_eiface "$@"
}

# service ngb destroy: remove an eiface
ngb_shutdown_eiface() {
	nodename="$1"
	for bridge in $ngb_bridge_list
	do
		eval list=\$ngb_${bridge}_list
		if echo $list|grep -qw $nodename
		then
			echo Removing $nodename from $bridge
			ngctl shutdown "$nodename":
		fi
	done
}

ngb_destroy() {
	ngb_shutdown_eiface "$@"
	sysrc ngb_${bridge}_list-="$nodename"
}

ngb_unjail() {
	if_name="$1"
	jail_name="${2:-$1}"
	ifconfig "$if_name" -vnet "$jail_name"
	ngctl shutdown "${if_name}:"
	#ngb_shutdown_eiface "$if_name"
}

ngb_bridge() {
	bridge=$1
	bridgeif=$2
	[ -z "$LNUM" ] && ngb_init

	# Check for bridge name conflicts
	brmatch=`echo $bridge|tr _ .`
	if ifconfig -l|grep -wo "$brmatch">/dev/null
	then
		echo Bridge name $bridge conflicts with an existing interface.
		return 1
	fi

	# If we get a second parameter, update the bridge rc var
	if [ -n "$bridgeif" ]
	then
		eval ngb_${bridge}_if=${bridgeif}
		sysrc ngb_${bridge}_if=${bridgeif}
	fi

	# If given an existing interface, bridge to it, otherwise
	# create an eiface
	eval linkif=\$ngb_${bridge}_if
	if [ -z "$linkif" ]
	then
		echo No interface given for bridge $bridge.
		return 1
	fi
	linkmatch=`echo $linkif|tr _ .`
	if ifconfig -l|grep -qw "$linkmatch"
	then
		ngb_public $bridge
	else
		ngb_private $bridge
	fi
	eval linklist=\"\$ngb_${bridge}_list\"
	[ -z "$linklist" ] && return
	echo -n "Creating $bridge eiface nodes:"
	for newif in $linklist
	do
		echo -n " $newif"
		ngb_addif $bridge $newif
	done
	echo
}

# TO-DO: Show a complete list of bridged connections if applicable.
ngb_shutdown_bridge() {
	nodename="$1"
	# TO-DO: We also need to check for bridges not recorded in rc.conf.
	eval node_list=\$ngb_${nodename}_list
	if [ -n "$node_list" ]
	then
		echo -n $nodename is a bridge. First destroy:\
		echo $node_list
		return 1
	fi
	eval bridgeif=\$ngb_${nodename}_if
	if [ -n "$bridgeif" ]
	then
		iftype=`ngctl list|grep -w $bridgeif|cut -wf5`
		if [ "$iftype" == "eiface" ]
		then
			#echo "Shutdown $bridgeif"
			echo ngctl shutdown "$bridgeif":
			ngctl shutdown "${bridgeif}:"
		else
		fi
	fi
	#echo Shutdown bridge $nodename
	# TO-DO: Skip if bridge is already gone.
	echo ngctl shutdown "$nodename":
	ngctl shutdown "$nodename":
	sysrc -x "ngb_${nodename}_if"
}

# Create nodes and ifaces defined in rc.conf
ngb_start() {
	ngb_init
	echo Starting $name.
	if [ "$LNUM" -gt 0 ]
	then
		echo Netgraph already initialized with $LNUM links.
		exit 1
	fi
	for bridge in $ngb_bridge_list
	do
		ngb_bridge $bridge
	done
	echo Created $LNUM links.
}

# Return a netgraph link count
ngb_status() {
	ngb_vmname
	awk -f "${ngb_share_dir}/ng-buddy-status.awk"
	ngb_init
	echo Netgraph links: $LNUM
}

# Blindly lay waste to all netgraph nodes
ngb_stop() {
	ngb_init
	if [ $LNUM = "0" ]
	then
		echo No links found.
		exit 1
	fi
	ngctl list |\
	awk '{print $2}'|\
	xargs -tn1 -I% ngctl shutdown %: 2>/dev/null
	echo Removed $LNUM links.
	LNUM="" # In case this is a restart.
}

run_rc_command "$1" "$2" "$3"
