#!/bin/sh

# PROVIDE: ngup
# REQUIRE: SERVERS dmesg
# BEFORE:  vm jail
# KEYWORD:

. /etc/rc.subr

name="ngup"
rcvar="ngup_enable"

command="/usr/local/sbin/${name}"
start_cmd="${name}_start"
stop_cmd="${name}_stop"
add_cmd="${name}_add"
create_cmd="${name}_add"
status_cmd="${name}_status"
destroy_cmd="${name}_destroy"
remove_cmd="${name}_destroy"
drop_cmd="${name}_destroy"
extra_commands="add drop destroy remove create"

load_rc_config "$ngup"
: ${ngup_private:=""}
: ${ngup_private_bridge:="private"}
: ${ngup_private_list:="$ngup_list"}
: ${ngup_public:=""}
: ${ngup_public_bridge:="public"}
: ${ngup_public_list:="$ngup_list"}

# If private or public isn't specified, default to private
[ "$ngup_private$ngup_public" ] || ngup_private="$ngup_enable"

case $ngup_private in
	[yY][eE][sS])	: ${ngup_private_if:="nghost0"} ;;
	[nN][oO])	ngup_private_if="" ;;
	*)		: ${ngup_private_if:="$ngup_private"} ;;
esac

case $ngup_public in
	[yY][eE][sS])	: ${ngup_public_if:=`ifconfig -lu|sed 's- .*--'`} ;;
	[nN][oO])	ngup_public_if="" ;;
	*)		: ${ngup_public_if:="$ngup_public"} ;;
esac

linkpp(){
	LNUM=$((LNUM+1))
}

ngup_init() {
	kldload -nq ng_ether ng_bridge
	LNUM=`ngctl list -l|awk -F'.*link| ' '/link/{if($2>x)x=$2}END{print x}'`
	if [ -n "$LNUM" ]; then
		linkpp
	else
		LNUM=0
	fi
}


ngup_private() {
	ngctl mkpeer eiface ether ether
	ngctl name ngeth0: $ngup_private_if
	ifconfig ngeth0 name $ngup_private_if up > /dev/null
	ngctl mkpeer $ngup_private_if: bridge ether link${LNUM}; linkpp
	ngctl name $ngup_private_if:ether $ngup_private_bridge
}

ngup_public() {
	ngctl msg $ngup_public_if: setpromisc 1
	ngctl msg $ngup_public_if: setautosrc 0
	ngctl mkpeer $ngup_public_if: bridge lower link${LNUM}; linkpp
	ngctl name  $ngup_public_if:lower $ngup_public_bridge
	ngctl connect $ngup_public_if: $ngup_public_bridge: upper link${LNUM}; linkpp
}

ngup_addif() {
	bridge=$1
	ifname=$2
	ifconfig $ifname > /dev/null 2>&1 && return
	ngctl mkpeer $bridge: eiface link${LNUM} ether
	ngif=`ngctl show -n $bridge:link${LNUM} |awk '{print $2}'`; linkpp
	ngctl name $ngif: $ifname
	ifconfig $ngif name $ifname >/dev/null
}

ngup_addiflist() {
	for newif in $2; do
		ngup_addif $1 $newif
	done
}

ngup_add() {
	ifnames="$1"
	bridgename="$2"
	case $bridgename in
		private)bridge="$ngup_private_bridge" ;;
		public)	bridge="$ngup_public_bridge" ;;
		"")	if [ -n "$ngup_public_bridge" ]; then 
				bridge="$ngup_public_bridge"
			else
				bridge="$ngup_private_bridge"
			fi ;;
		*)	exit ;;	# Extend to custom bridges? 
	esac
	ngup_init
	ngup_addiflist "$bridge" "$ifnames"
	eval "sysrc ngup_${bridge}_list+=\"$ifnames\""
}

ngup_destroy() {
        ifnames="$1"
        bridgename="$2"
        case $bridgename in
                private)bridge="$ngup_private_bridge" ;;
                public) bridge="$ngup_public_bridge" ;;
                "")     if [ -n "$ngup_public_bridge" ]; then
                                bridge="$ngup_public_bridge"
                        else
                                bridge="$ngup_private_bridge"
                        fi ;;
                *)      exit ;; # Extend to custom bridges?
        esac
	echo $ifnames|xargs -tn1 -I% ngctl shutdown %:
        eval "sysrc ngup_${bridge}_list-=\"$ifnames\""
}

ngup_start() {
	echo Starting $name.
	ngup_init
	if [ -n "$ngup_private_if" ]; then
		ngup_private
		ngup_addiflist "$ngup_private_bridge" "$ngup_private_list"
	fi
	if [ -n "$ngup_public_if" ]; then
		ngup_public
		ngup_addiflist "$ngup_public_bridge" "$ngup_public_list"
	fi
	echo Created $LNUM links.
}

ngup_status() {
	ngup_init
	echo Netgraph links: $LNUM
}

ngup_stop() {
	ngctl list |\
	awk '{print $2}'|\
	xargs -tn1 -I% ngctl shutdown %: 2>/dev/null
	echo Removed $LNUM links.
}

run_rc_command "$1" "$2" "$3"
