#!/bin/sh

# netgraph-buddy (ngup) helps configure netgraph in jail+vm environments.
#
# PROVIDE: ngup
# REQUIRE: FILESYSTEMS
# BEFORE: netif

. /etc/rc.subr

name="ngup"
rcvar="ngup_enable"

# By default, "service ngup enable" will generate a "public" and "private"
# netgraph bridge. "public" will attach to the interface associated with the
# default route, while "private" links to a new netgraph eiface called "nghost0"
# for running private network services, such as dhcpd.
#
# Custom bridge names can be added with "ngup_BRIDGE_NAME_if". If the interface
# exists we'll bridge to it. If the interface doesn't exist, we'll create an
# eiface with that name along with the bridge.
#
# These bridges can be added to vm-bhyve 1.5+ using "service ngup vmconf".
#
# Create and link and eiface using "service ngup create JAIL [BRIDGE]".
# If bridge is not given, we'll try to guess using ngup_bridge_default.
#
# Create a bridge and link it to an ether device or new or new eiface with
# "service ngup bridge BRIDGE_NAME BRIDGE_IF"
#
# Shutdown a created node using "service ngup destroy NAME". Bridges cannot be
# dropped until all eifaces in ngup_BRIDGE_NAME_list have been shutdown.

command="/usr/local/sbin/${name}"
enable_cmd="${name}_enable"
start_cmd="${name}_start"
stop_cmd="${name}_stop"
status_cmd="${name}_status"
bridge_cmd="${name}_bridge"
create_cmd="${name}_create"
destroy_cmd="${name}_destroy"
vmconf_cmd="${name}_vmconf"
vmname_cmd="${name}_vmname"
extra_commands="bridge create destroy vmconf vmname"

load_rc_config "$ngup"
# TO-DO: Find a more elegant way to get the dynamic "bridge_name" list.
: ${ngup_bridge_list:="`list_vars 'ngup_*_if'|sed -E 's/^ngup_|_if$//g'|xargs`"}
# Get the last bridge alphabetically so "public" is the default, which is my
# personal preference.
: ${ngup_bridge_default:="`echo $ngup_bridge_list|awk '{print $NF}'`"}

# Count netgraph links
linkpp() {
	LNUM=$((LNUM+1))
}

# Make a "public" bridge to the NIC containing the default gateway, and create a
# "private" bridge linked to eiface nghost0.
ngup_enable() {
	sysrc ngup_enable=YES
	if [ -n "$ngup_bridge_list" ]
	then
		exit 0
	else
		echo
		echo Adding default bridges.
	fi
	: ${ngup_public_if:="`netstat -rn|grep default|cut -wf4|tr . _`"}
	: ${ngup_private_if:="nghost0"}
	sysrc ngup_public_if="$ngup_public_if"
	sysrc ngup_private_if="$ngup_private_if"
}

# Configure vm-bhyve with ngup bridges (version 1.5+ required)
ngup_vmname() {
	case "$vm_dir" in
		zfs:*)	vm_dir="`echo "$vm_dir"|cut -d: -f2`"
			vm_conf="`zfs get -H mountpoint "$vm_dir"|cut -wf3`" ;;
		?*)	vm_conf="$vm_dir" ;;
		*)	return ;;
	esac
	running_vms=`ps axww|awk '/bhyve[:] /{print $6}'`
	for this_vm in $running_vms; do
		vm_socket_name=`echo $this_vm|tr ". " _`
		vm_if_conf=`tail -r "$vm_conf/$this_vm/vm-bhyve.log" |\
			grep -Eom1 'netgraph,path=.*,peerhook=[^,]+'`
		path=`echo $vm_if_conf|cut -d, -f2|cut -d= -f2`
		peerhook=`echo $vm_if_conf|cut -d, -f3|cut -d= -f2`
		ngctl name $path$peerhook $vm_socket_name
	done
	

}

ngup_vmconf() {
	case "$vm_dir" in
		zfs:*)	vm_dir="`echo "$vm_dir"|cut -d: -f2`"
			vm_conf="`zfs get -H mountpoint "$vm_dir"|cut -wf3`" ;;
		?*)	vm_conf="$vm_dir" ;;
		*)	return ;;
	esac
	vm_bak="$vm_conf/.config/.system.conf.bak"
	vm_conf="$vm_conf/.config/system.conf"
	cp -p "$vm_conf" "$vm_bak"
	echo Configuring $vm_conf:
	sysrc -f "$vm_conf" switch_list+="$ngup_bridge_list"
	for ngup_bridge in $ngup_bridge_list
	do
		sysrc -f "$vm_conf" type_$ngup_bridge=netgraph
	done
}

# Make sure netgraph is loaded and count its links.
ngup_init() {
	[ -n "$LNUM" ] && linkpp
	kldload -nq ng_ether ng_bridge
	LNUM=`ngctl list -l|awk -F'.*link| ' '/link/{if($2>x||x=="")x=$2}END{print x}'`
	if [ -n "$LNUM" ]
	then
		linkpp
	else
		LNUM=0
	fi
}

# Enable a private bridge and attach a new eiface.
ngup_private() {
	bridge=$1
	eval linkif=\$ngup_${bridge}_if
	ngctl mkpeer eiface ether ether
	ngeth=`ngctl list|cut -wf3|grep '^ngeth'|sort -n|tail -1`
	ngctl name $ngeth: $linkif
	ifconfig $ngeth name $linkif up > /dev/null
	ngctl mkpeer $linkif: bridge ether link${LNUM}; linkpp
	ngctl name $linkif:ether $bridge
}

# Enable a public bridge and attach an existing NIC
ngup_public() {
	bridge=$1
	eval linkif=\$ngup_${bridge}_if
	ngctl msg $linkif: setpromisc 1
	ngctl msg $linkif: setautosrc 0
	ngctl mkpeer $linkif: bridge lower link${LNUM}; linkpp
	ngctl name  $linkif:lower $bridge
	ngctl connect $linkif: $bridge: upper link${LNUM}; linkpp
}

# Attach a new eiface to the specified bridge
ngup_addif() {
	bridge=$1
	ifname=$2
	ifconfig $ifname > /dev/null 2>&1 && return
	ngctl mkpeer $bridge: eiface link${LNUM} ether
	ngif=`ngctl show -n $bridge:link${LNUM} |awk '{print $2}'`; linkpp
	ngctl name $ngif: $ifname
	ifconfig $ngif name $ifname >/dev/null
}

# Attach new eifaces to the specified bridge
ngup_addiflist() {
}

# service ngup create: add the eiface to the specified (or default) bridge
ngup_create() {
	ngup_init
	ifname="$1"
	bridge="$2"
	: ${bridge:=$ngup_bridge_default}
	[ $LNUM = 0 ] && linkpp
	ngup_addif "$bridge" "$ifname"
	sysrc ngup_${bridge}_list+="$ifname"
}

# service ngup destroy: remove an eiface
ngup_destroy() {
	nodename="$1"
	# TO-DO: Detect bridge
	# TO-DO: Detect bridge & bridge interface
	nodetype=`ngctl list|grep -w $nodename|cut -wf5`
	if [ "$nodetype" == "bridge" ]
	then
		eval node_list=\$ngup_${nodename}_list
		if [ -n "$node_list" ]
		then
			echo -n $nodename is a bridge. First destroy:\
			echo $node_list
			return 1
		fi
		eval bridgeif=\$ngup_${nodename}_if
		iftype=`ngctl list|grep -w $bridgeif|cut -wf5`
		if [ "$iftype" == "eiface" ]
		then
			echo "Shutdown $bridgeif"
			echo ngctl shutdown "$bridgeif":
		else
			echo Shutdown bridge $nodename
			echo ngctl shutdown "$nodename":
		fi
		sysrc -x ngup_$nodename_if
	elif [ "$nodetype" == eiface ]
	then
		for bridge in $ngup_bridge_list
		do
			eval list=\$ngup_${bridge}_list
			if echo $list|grep -qw $nodename
			then
				echo Removing $nodename from $bridge
				ngctl shutdown "$nodename":
				sysrc ngup_${bridge}_list-="$nodename"
			fi
		done
	fi
}


ngup_bridge() {
	bridge=$1
	bridgeif=$2
	[ -z "$LNUM" ] && ngup_init

	# Check for bridge name conflicts
	brmatch=`echo $bridge|tr _ .`
	if ifconfig -l|grep -wo "$brmatch">/dev/null
	then
		echo Bridge name $bridge conflicts with an existing interface.
		return 1
	fi

	# If we get a second parameter, update the bridge rc var
	if [ -n "$bridgeif" ]
	then
		eval ngup_${bridge}_if=${bridgeif}
		sysrc ngup_${bridge}_if=${bridgeif}
	fi

	# If given an existing interface, bridge to it, otherwise
	# create an eiface
	eval linkif=\$ngup_${bridge}_if
	if [ -z "$linkif" ]
	then
		echo No interface given for bridge $bridge.
		return 1
	fi
	linkmatch=`echo $linkif|tr _ .`
	if ifconfig -l|grep -qw "$linkmatch"
	then
		ngup_public $bridge
	else
		ngup_private $bridge
	fi
	eval linklist=\"\$ngup_${bridge}_list\"
	[ -z "$linklist" ] && return
	echo -n "Creating $bridge eiface nodes:"
	for newif in $linklist
	do
		echo -n " $newif"
		ngup_addif $bridge $newif
	done
	echo
}

# Create nodes and ifaces defined in rc.conf
ngup_start() {
	ngup_init
	echo Starting $name.
	if [ "$LNUM" -gt 0 ]
	then
		echo Netgraph already initialized with $LNUM links.
		exit 1
	fi
	for bridge in $ngup_bridge_list
	do
		ngup_bridge $bridge
	done
	echo Created $LNUM links.
}

# Return a netgraph link count
ngup_status() {
	ngup_init
	echo Netgraph links: $LNUM
}

# Blindly lay waste to all netgraph nodes
ngup_stop() {
	ngup_init
	if [ $LNUM = "0" ]
	then
		echo No links found.
		exit 1
	fi
	ngctl list |\
	awk '{print $2}'|\
	xargs -tn1 -I% ngctl shutdown %: 2>/dev/null
	echo Removed $LNUM links.
	LNUM="" # In case this is a restart.
}

run_rc_command "$1" "$2" "$3"
