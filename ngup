#!/bin/sh

# ngup helps manage a simple netgraph setup for jail+vm environments.
# 
# PROVIDE: ngup
# REQUIRE: SERVERS dmesg
# BEFORE:  vm jail

. /etc/rc.subr

name="ngup"
rcvar="ngup_enable"

# By default, "service ngup enable" will generate a "public" and "private"
# netgraph bridge. "public" will attach to the interface associated with the
# default route, while "private" links to a new netgraph eiface called "nghost0"
# for running private network services, such as dhcpd.
#
# Custom bridge names can be added with "ngup_bridge_name_if". If the interface
# exists we'll bridge to it. If the interface doesn't exist, we'll create an
# eiface with that name along with the bridge.
#
# These bridges can be added to vm-bhyve 1.5+ using "service ngup vmconf".
#
# Link an eiface, e.g., for jails, using "service ngup create jail_name bridge_name".
# Drop an eiface using "service ngup destroy jail_name bridge_name". If "bridge_name"
# is omitted, create/destroy will try the "ngup_bridge_default" option ("public" in
# the default setup).

command="/usr/local/sbin/${name}"
enable_cmd="${name}_enable"
start_cmd="${name}_start"
stop_cmd="${name}_stop"
status_cmd="${name}_status"
create_cmd="${name}_create"
destroy_cmd="${name}_destroy"
vmconf_cmd="${name}_vmconf"
extra_commands="create destroy vmconf"

load_rc_config "$ngup"
# TO-DO: Find a more elegant way to get the dynamic "bridge_name" list.
: ${ngup_bridge_list:="`list_vars 'ngup_*_if'|sed -E 's/^ngup_|_if$//g'|xargs`"}
# Get the last bridge alphabetically so "public" is the default, which is my
# personal preference.
: ${ngup_bridge_default:="`echo $ngup_bridge_list|awk '{print $NF}'`"}

# Count netgraph links
linkpp() {
	LNUM=$((LNUM+1))
}

# Make a "public" bridge to the NIC containing the default gateway, and create a
# "private" bridge linked to eiface nghost0.
ngup_enable() {
	sysrc ngup_enable=YES
	if [ -n "$ngup_bridge_list" ]
	then
		exit 0
	else
		echo
		echo Adding default bridges.
	fi
	: ${ngup_public_if:="`netstat -rn|grep default|cut -wf4|tr . _`"}
	: ${ngup_private_if:="nghost0"}
	sysrc ngup_public_if="$ngup_public_if"
	sysrc ngup_private_if="$ngup_private_if"
}

# Configure vm-bhyve with ngup bridges (version 1.5+ required)
ngup_vmconf() {
	case "$vm_dir" in
		zfs:*)	vm_dir="`echo "$vm_dir"|cut -d: -f2`"
			vm_conf="`zfs get -H mountpoint "$vm_dir"|cut -wf3`" ;;
		?*)	vm_conf="$vm_dir" ;;
		*)	return ;;
	esac
	vm_bak="$vm_conf/.config/.system.conf.bak"
	vm_conf="$vm_conf/.config/system.conf"
	cp -p "$vm_conf" "$vm_bak"
	echo Configuring $vm_conf:
	sysrc -f "$vm_conf" switch_list+="$ngup_bridge_list"
	for ngup_bridge in $ngup_bridge_list
	do
		sysrc -f "$vm_conf" type_$ngup_bridge=netgraph
	done
}

# Make sure netgraph is loaded and count its links.
ngup_init() {
	kldload -nq ng_ether ng_bridge
	LNUM=`ngctl list -l|awk -F'.*link| ' '/link/{if($2>x||x=="")x=$2}END{print x}'`
	if [ -n "$LNUM" ]
	then
		linkpp
	else
		LNUM=0
	fi
}

# Enable a private bridge and attach a new eiface.
ngup_private() {
	bridge=$1
	eval linkif=\$ngup_${bridge}_if
	ngctl mkpeer eiface ether ether
	ngeth=`ngctl list|cut -wf3|grep '^ngeth'|sort -n|tail -1`
	ngctl name $ngeth: $linkif
	ifconfig $ngeth name $linkif up > /dev/null
	ngctl mkpeer $linkif: bridge ether link${LNUM}; linkpp
	ngctl name $linkif:ether $bridge
}

# Enable a public bridge and attach an existing NIC
ngup_public() {
	bridge=$1
	eval linkif=\$ngup_${bridge}_if
	ngctl msg $linkif: setpromisc 1
	ngctl msg $linkif: setautosrc 0
	ngctl mkpeer $linkif: bridge lower link${LNUM}; linkpp
	ngctl name  $linkif:lower $bridge
	ngctl connect $linkif: $bridge: upper link${LNUM}; linkpp
}

# Attach a new eiface to the specified bridge
ngup_addif() {
	bridge=$1
	ifname=$2
	ifconfig $ifname > /dev/null 2>&1 && return
	ngctl mkpeer $bridge: eiface link${LNUM} ether
	ngif=`ngctl show -n $bridge:link${LNUM} |awk '{print $2}'`; linkpp
	ngctl name $ngif: $ifname
	ifconfig $ngif name $ifname >/dev/null
}

# Attach new eifaces to the specified bridge
ngup_addiflist() {
	bridge=$1
	eval linklist=\"\$ngup_${bridge}_list\"
	[ -z "$linklist" ] && return
	echo -n "Creating $bridge nodes: "
	for newif in $linklist
	do
		ngup_addif $bridge $newif
	done
	echo
}

# service ngup create: add the eiface to the specified (or default) bridge
ngup_create() {
	ngup_init
	ifname="$1"
	bridge="$2"
	: ${bridge:=$ngup_bridge_default}
	[ $LNUM = 0 ] && linkpp
	ngup_addif "$bridge" "$ifname"
	sysrc ngup_${bridge}_list+="$ifname"
}

# service ngup destroy: remove an eiface
ngup_destroy() {
	ifname="$1"
	bridge="$2"
	: ${bridge:=$ngup_bridge_default}
	ngctl shutdown "$ifname"
	sysrc ngup_${bridge}_list-="$ifname"
}

# Create nodes and ifaces defined in rc.conf
ngup_start() {
	ngup_init
	echo Starting $name.
	if [ "$LNUM" -gt 0 ]
	then
		echo Netgraph already initialized with $LNUM links.
		exit 1 
	fi
	for bridge in $ngup_bridge_list
	do
		# Check for bridge name conflicts
		brmatch=`echo $bridge|tr _ .`
		if ifconfig -l|grep -wo "$brmatch">/dev/null
		then
			echo Bridge name $bridge conflicts with an existing interface.
			exit 1
		fi
		# If given an existing interface, bridge to it, otherwise
		# create an eiface
		eval linkif=\$ngup_${bridge}_if
		linkmatch=`echo $linkif|tr _ .`
		if ifconfig -l|grep -w "$linkmatch">/dev/null
		then
			ngup_public $bridge
		else
			ngup_private $bridge
		fi
		ngup_addiflist $bridge

	done
	echo Created $LNUM links.
}

# Return a netgraph link count
ngup_status() {
	ngup_init
	echo Netgraph links: $LNUM
}

# Blindly lay waste to all netgraph nodes
ngup_stop() {
	ngup_init
	if [ $LNUM = "0" ]
	then
		echo No links found.
		exit 1
	fi
	ngctl list |\
	awk '{print $2}'|\
	xargs -tn1 -I% ngctl shutdown %: 2>/dev/null
	echo Removed $LNUM links.
	LNUM="" # In case this is a restart.
}

run_rc_command "$1" "$2" "$3"
